package dbs

import (
	"database/sql"

	"github.com/sqlpipe/sqlpipe/internal/engine/systems/formatters"
)

var MysqlCreateFormatters = map[string]func(column *sql.ColumnType, terminator string) (string, error){
	"SQL_UNKNOWN_TYPE":    formatters.TextCreateFormatter,
	"SQL_CHAR":            formatters.TextCreateFormatter,
	"SQL_NUMERIC":         formatters.NumericCreateFormatter,
	"SQL_DECIMAL":         formatters.NumericCreateFormatter,
	"SQL_INTEGER":         formatters.IntCreateFormatter,
	"SQL_SMALLINT":        formatters.SmallIntCreateFormatter,
	"SQL_FLOAT":           formatters.DoubleCreateFormatter,
	"SQL_REAL":            formatters.DoubleCreateFormatter,
	"SQL_DOUBLE":          formatters.DoubleCreateFormatter,
	"SQL_DATETIME":        formatters.TimestampCreateFormatter,
	"SQL_TIME":            formatters.TimeCreateFormatter,
	"SQL_VARCHAR":         formatters.TextCreateFormatter,
	"SQL_TYPE_DATE":       formatters.DateCreateFormatter,
	"SQL_TYPE_TIME":       formatters.TimeCreateFormatter,
	"SQL_TYPE_TIMESTAMP":  formatters.TimestampCreateFormatter,
	"SQL_TIMESTAMP":       formatters.TimestampCreateFormatter,
	"SQL_LONGVARCHAR":     formatters.TextCreateFormatter,
	"SQL_BINARY":          formatters.ByteaCreateFormatter,
	"SQL_VARBINARY":       formatters.ByteaCreateFormatter,
	"SQL_LONGVARBINARY":   formatters.ByteaCreateFormatter,
	"SQL_BIGINT":          formatters.BigIntCreateFormatter,
	"SQL_TINYINT":         formatters.SmallIntCreateFormatter,
	"SQL_BIT":             formatters.BoolCreateFormatter,
	"SQL_WCHAR":           formatters.TextCreateFormatter,
	"SQL_WVARCHAR":        formatters.TextCreateFormatter,
	"SQL_WLONGVARCHAR":    formatters.TextCreateFormatter,
	"SQL_GUID":            formatters.UuidCreateFormatter,
	"SQL_SIGNED_OFFSET":   formatters.TextCreateFormatter,
	"SQL_UNSIGNED_OFFSET": formatters.TextCreateFormatter,
	"SQL_SS_XML":          formatters.XmlCreateFormatter,
	"SQL_SS_TIME2":        formatters.TimeCreateFormatter,
}

var MysqlValFormatters = map[string]func(value interface{}, terminator string, nullString string) (string, error){
	"SQL_UNKNOWN_TYPE":    formatters.Raw,
	"SQL_CHAR":            formatters.Raw,
	"SQL_NUMERIC":         formatters.Raw,
	"SQL_DECIMAL":         formatters.Raw,
	"SQL_INTEGER":         formatters.Raw,
	"SQL_SMALLINT":        formatters.Raw,
	"SQL_FLOAT":           formatters.Raw,
	"SQL_REAL":            formatters.Raw,
	"SQL_DOUBLE":          formatters.Raw,
	"SQL_DATETIME":        formatters.Raw,
	"SQL_TIME":            formatters.Raw,
	"SQL_VARCHAR":         formatters.CastToBytesCastToStringPrintQuoted,
	"SQL_TYPE_DATE":       formatters.CastToTimeFormatToDateString,
	"SQL_TYPE_TIME":       formatters.CastToTimeFormatToTimeString,
	"SQL_TYPE_TIMESTAMP":  formatters.CastToTimeFormatToTimetampString,
	"SQL_TIMESTAMP":       formatters.Raw,
	"SQL_LONGVARCHAR":     formatters.Raw,
	"SQL_BINARY":          formatters.Raw,
	"SQL_VARBINARY":       formatters.Raw,
	"SQL_LONGVARBINARY":   formatters.CastToBytesCastToStringPrintQuotedHex,
	"SQL_BIGINT":          formatters.Raw,
	"SQL_TINYINT":         formatters.Raw,
	"SQL_BIT":             formatters.CastToBoolWriteBinaryEquivalent,
	"SQL_WCHAR":           formatters.CastToBytesCastToStringPrintQuoted,
	"SQL_WVARCHAR":        formatters.CastToBytesCastToStringPrintQuoted,
	"SQL_WLONGVARCHAR":    formatters.CastToBytesCastToStringPrintQuoted,
	"SQL_GUID":            formatters.Quoted,
	"SQL_SIGNED_OFFSET":   formatters.Raw,
	"SQL_UNSIGNED_OFFSET": formatters.Raw,
	"SQL_SS_XML":          formatters.Raw,
	"SQL_SS_TIME2":        formatters.Raw,
}
