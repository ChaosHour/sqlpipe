name: build-sqlpipe-binaries
on:
  push:
    branches: [ main ]
  workflow_dispatch:
jobs:
  start-arm-runner:
    name: Start ARM runner
    runs-on: ubuntu-20.04
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Start ARM EC2 builder
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          ec2-image-id: ami-05db6ac0d1f8a4907
          ec2-instance-type: m6g.large
          subnet-id: subnet-ae198df3
          security-group-id: sg-4ffd7a3b
  # start-x86-runner:
  #   name: Start x86 runner
  #   runs-on: ubuntu-20.04
  #   outputs:
  #     label: ${{ steps.start-ec2-runner.outputs.label }}
  #     ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
  #   steps:
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}
  #     - name: Start ARM EC2 builder
  #       id: start-ec2-runner
  #       uses: machulav/ec2-github-runner@v2
  #       with:
  #         mode: start
  #         github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
  #         ec2-image-id: ami-0d5508a3be09f2763
  #         ec2-instance-type: m6i.large
  #         subnet-id: subnet-ae198df3
  #         security-group-id: sg-4ffd7a3b
  build-arm-binaries:
    name: Build ARM binaries
    needs: start-arm-runner
    runs-on: ${{ needs.start-arm-runner.outputs.label }}
    steps:
      - name: Add go to path
        run: echo "/usr/local/go/bin" >> $GITHUB_PATH
      - name: Setup go directory
        run: mkdir linux
      - name: Git pull
        uses: actions/checkout@v2
        with:
          ref: main
      - name: Setup go cache
        run: mkdir gocache
      - name: Run setup script
        run: sh build.sh
        env:
          GOPATH: /actions-runner/_work/sqlpipe/
          GOCACHE: /actions-runner/_work/sqlpipe/gocache
      - name: Upload to s3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --follow-symlinks
        env:
          AWS_S3_BUCKET: sqlpipe-downloads
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          SOURCE_DIR: 'go/src/sqlpipe/arm'
          DEST_DIR: 'arm/v2'
  # build-x86-binaries:
  #   name: Build x86 binaries
  #   needs: start-x86-runner
  #   runs-on: ${{ needs.start-x86-runner.outputs.label }}
  #   steps:
  #     - name: Is docker installed
  #       run: docker run hello-world
  #     - name: Add go to path
  #       run: echo "/usr/local/go/bin" >> $GITHUB_PATH
  #     - name: Setup go directory
  #       run: mkdir go && cd go && mkdir src && mkdir bin && mkdir pkg
  #     - name: Setup go cache
  #       run: mkdir gocache
  #     - name: setup binaries directory
  #       run: mkdir x86
  #     - name: Git pull
  #       uses: actions/checkout@v2
  #       with:
  #         ref: main
  #         path: go/src/sqlpipe
  #     - name: Build Linux x86 binary
  #       run: cd go/src/sqlpipe && go build -o linux/sqlpipe
  #       env:
  #         GOOS: linux
  #         GOARCH: amd64
  #         GOPATH: /actions-runner/_work/sqlpipe/sqlpipe
  #         GOCACHE: /actions-runner/_work/sqlpipe/sqlpipe/gocache
  #     - name: Build macOS x86 binary
  #       run: cd go/src/sqlpipe && go build -o macos/sqlpipe
  #       env:
  #         GOOS: darwin
  #         GOARCH: amd64
  #         GOPATH: /actions-runner/_work/sqlpipe/sqlpipe
  #         GOCACHE: /actions-runner/_work/sqlpipe/sqlpipe/gocache
  #     - name: Build Windows x86 binary
  #       run: cd go/src/sqlpipe && go build -o windows/sqlpipe
  #       env:
  #         GOOS: windows
  #         GOARCH: amd64
  #         GOPATH: /actions-runner/_work/sqlpipe/sqlpipe
  #         GOCACHE: /actions-runner/_work/sqlpipe/sqlpipe/gocache
  #     - name: upload to s3
  #       uses: jakejarvis/s3-sync-action@master
  #       with:
  #         args: --acl public-read --follow-symlinks
  #       env:
  #         AWS_S3_BUCKET: sqlpipe-downloads
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         AWS_REGION: ${{ secrets.AWS_REGION }}
  #         SOURCE_DIR: 'go/src/sqlpipe/x86'
  #         DEST_DIR: 'x86'

  # build-ami:
  #   runs-on: ubuntu-20.04
  #   needs:
  #     - start-arm-runner
  #     - build-arm-binaries
  #   name: build-ami
  #   env:
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v2
  #     - name: Init project
  #       uses: hashicorp/packer-github-actions@master
  #       with:
  #         command: init
  #         target: /home/runner/work/sqlpipe/sqlpipe/aws-ubuntu.pkr.hcl
  #     - name: Validate Template
  #       uses: hashicorp/packer-github-actions@master
  #       with:
  #         command: validate
  #         arguments: -syntax-only
  #         target: aws-ubuntu.pkr.hcl

  #     # build artifact
  #     - name: Build Artifact
  #       uses: hashicorp/packer-github-actions@master
  #       with:
  #         command: build
  #         arguments: "-color=false -on-error=abort"
  #         target: aws-ubuntu.pkr.hcl
  #       env:
  #         PACKER_LOG: 1

  stop-arm-runner:
    name: Stop arm runner
    needs:
      - start-arm-runner
      - build-arm-binaries
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Stop ARM runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          label: ${{ needs.start-arm-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-arm-runner.outputs.ec2-instance-id }}
  # stop-x86-runner:
  #   name: Stop x86 runner
  #   needs:
  #     - start-x86-runner
  #     - build-x86-binaries
  #   runs-on: ubuntu-latest
  #   if: ${{ always() }}
  #   steps:
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}
  #     - name: Stop x86 runner
  #       uses: machulav/ec2-github-runner@v2
  #       with:
  #         mode: stop
  #         github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
  #         label: ${{ needs.start-x86-runner.outputs.label }}
  #         ec2-instance-id: ${{ needs.start-x86-runner.outputs.ec2-instance-id }}